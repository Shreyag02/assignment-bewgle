{"version":3,"sources":["Components/Votes.js","Components/Category.js","Components/Featurerating.js","App.js","serviceWorker.js","index.js"],"names":["Votes","className","Button","color","outline","Badge","Data","review_rating","total","ListGroup","console","log","votes","map","vote","ListGroupItem","key","rating","Category","src","cover_image","alt","category","tags","Featurerating","feature_rating","place","food","service","staff","breakfast","App","name","area","city","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4TAmCeA,EA/BD,WACV,OACI,yBAAKC,UAAU,2BACX,6BACJ,yBAAKA,UAAU,iCACX,qCACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAO,GAA/B,YACa,kBAACC,EAAA,EAAD,CAAOF,MAAM,aAAaG,EAAKC,cAAcC,MAA7C,IAAoD,kBAAC,IAAD,CAAYP,UAAU,QAG3F,6BACA,kBAACQ,EAAA,EAAD,CAAWR,UAAU,0BACpBS,QAAQC,IAAIL,EAAKC,cAAcK,OAC/BN,EAAKC,cAAcK,MAAMC,KAAI,SAAAC,GAEtB,OACA,kBAACC,EAAA,EAAD,CAAed,UAAU,MAAMe,IAAKF,EAAKG,QAExCH,EAAKG,OAAO,kBAAC,IAAD,CAAYhB,UAAU,yBAFnC,MAE+Da,EAAKF,MAAM,kBAAC,IAAD,CAAYX,UAAU,gCCMjGiB,EAxBE,WAEjB,OACA,yBAAKjB,UAAU,UACX,yBAAKA,UAAU,gBACX,yBAAKkB,IAAKb,EAAKc,YAAanB,UAAU,0BAA0BoB,IAAI,MAExE,yBAAKpB,UAAU,YACf,yCACKK,EAAKgB,SAAST,KAAI,SAAAU,GAEf,OACA,kBAAClB,EAAA,EAAD,CAAOF,MAAM,OAAOF,UAAU,sCAC7BsB,MAIT,6BACA,kBAAC,EAAD,S,gCCJWC,EAdO,WAClB,OACI,6BACI,kBAACf,EAAA,EAAD,CAAWR,UAAU,iEACjB,kBAACc,EAAA,EAAD,CAAed,UAAU,uBAAsB,4BAAI,kBAAC,IAAD,MAAJ,YAAwCK,EAAKmB,eAAeC,MAA5D,IAAmE,kBAAC,IAAD,CAAYzB,UAAU,2BACxI,kBAACc,EAAA,EAAD,CAAed,UAAU,uBAAsB,4BAAI,kBAAC,IAAD,MAAJ,WAA8BK,EAAKmB,eAAeE,KAAlD,IAAwD,kBAAC,IAAD,CAAY1B,UAAU,2BAC7H,kBAACc,EAAA,EAAD,CAAed,UAAU,uBAAsB,4BAAI,kBAAC,IAAD,MAAJ,cAAgCK,EAAKmB,eAAeG,QAApD,IAA6D,kBAAC,IAAD,CAAY3B,UAAU,2BAClI,kBAACc,EAAA,EAAD,CAAed,UAAU,uBAAsB,4BAAI,kBAAC,IAAD,MAAJ,YAAiCK,EAAKmB,eAAeI,MAArD,IAA4D,kBAAC,IAAD,CAAY5B,UAAU,2BACjI,kBAACc,EAAA,EAAD,CAAed,UAAU,uBAAsB,4BAAI,kBAAC,IAAD,MAAJ,gBAAoCK,EAAKmB,eAAeK,UAAxD,IAAmE,kBAAC,IAAD,CAAY7B,UAAU,8B,cCOzI8B,MAZf,WACE,OACE,yBAAK9B,UAAU,OACb,wBAAIA,UAAU,IAAIK,EAAK0B,MACvB,4BAAI,0BAAM/B,UAAU,QAAO,kBAAC,IAAD,MAAkBK,EAAK2B,KAA9C,KAAsD3B,EAAK4B,OAC/D,6BACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.84571013.chunk.js","sourcesContent":["import React from 'react';\r\nimport Data from './data.json';\r\nimport {AiFillLike,BsStarFill} from 'react-icons/all';\r\nimport { ListGroup, ListGroupItem,Badge,Button } from 'reactstrap';\r\nconst Votes = () => {\r\n    return (\r\n        <div className=\" col-md-10 my-0 mx-auto\">\r\n            <br/>\r\n        <div className=\"d-flex justify-content-around\" >\r\n            <h3>Votes</h3>\r\n            <Button color=\"primary\" outline>\r\n                Total    <Badge color=\"secondary\">{Data.review_rating.total} <AiFillLike className=\"\"/></Badge>\r\n            </Button>\r\n        </div>\r\n        <br/>\r\n        <ListGroup className=\"col-md-11 mx-auto my-0\">\r\n        {console.log(Data.review_rating.votes)}\r\n        {Data.review_rating.votes.map(vote => {\r\n            \r\n                return(\r\n                <ListGroupItem className=\"h4 \" key={vote.rating}>\r\n                \r\n                {vote.rating}<BsStarFill className=\"m-1 p-1 text-warning\"/> : {vote.votes}<AiFillLike className=\"m-1 p-1 text-primary\"/>\r\n                \r\n                </ListGroupItem>\r\n                )\r\n            })}\r\n        </ListGroup>\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Votes;\r\n","import React from 'react';\r\nimport Data from './data.json';\r\nimport {Badge} from 'reactstrap';\r\nimport Votes from './Votes';\r\nconst Category = () => {\r\n        \r\nreturn(\r\n<div className=\"d-flex\">\r\n    <div className=\"col-md-6 p-4\">      \r\n        <img src={Data.cover_image} className=\"img-fluid img-thumbnail\" alt=\"\"/>\r\n    </div>\r\n    <div className=\"col-md-6\">\r\n    <h4>Category:</h4>\r\n        {Data.category.map(tags => {\r\n\r\n            return(\r\n            <Badge color=\"info\" className=\"align-self-center m-3 px-3 py-1 h6\" >\r\n            {tags}\r\n            </Badge>\r\n            )\r\n        })}\r\n    <br/>\r\n    <Votes/>\r\n    </div>\r\n</div>\r\n);\r\n}\r\n\r\nexport default Category;\r\n","import React from 'react';\r\nimport Data from './data.json';\r\nimport {HiOutlineOfficeBuilding, BsStarFill, GiBubblingBowl,MdFreeBreakfast, BsFillPeopleFill,RiServiceFill} from 'react-icons/all';\r\nimport { ListGroup, ListGroupItem } from 'reactstrap';\r\nconst Featurerating = () => {\r\n    return (\r\n        <div>\r\n            <ListGroup className=\"list-group-horizontal d-flex flex-wrap justify-content-around\">\r\n                <ListGroupItem className=\"col-md-3 m-1 border\"><h3><HiOutlineOfficeBuilding/> Place : {Data.feature_rating.place} <BsStarFill className=\"m-1 p-1 text-warning\"/></h3></ListGroupItem>\r\n                <ListGroupItem className=\"col-md-3 m-1 border\"><h3><GiBubblingBowl/> Food : {Data.feature_rating.food} <BsStarFill className=\"m-1 p-1 text-warning\"/></h3></ListGroupItem>\r\n                <ListGroupItem className=\"col-md-3 m-1 border\"><h3><RiServiceFill/> Service : {Data.feature_rating.service} <BsStarFill className=\"m-1 p-1 text-warning\"/></h3></ListGroupItem>\r\n                <ListGroupItem className=\"col-md-3 m-1 border\"><h3><BsFillPeopleFill/> Staff : {Data.feature_rating.staff} <BsStarFill className=\"m-1 p-1 text-warning\"/></h3></ListGroupItem>\r\n                <ListGroupItem className=\"col-md-3 m-1 border\"><h3><MdFreeBreakfast/> Breakfast : {Data.feature_rating.breakfast} <BsStarFill className=\"m-1 p-1 text-warning\"/></h3></ListGroupItem>\r\n            </ListGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Featurerating;\r\n","import React from 'react';\nimport './App.css';\nimport {Category, Featurerating, Votes, Data} from './Components';\nimport { FaMapMarkerAlt} from \"react-icons/fa\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"\">{Data.name}</h1>\n      <h4><span className=\"icon\"><FaMapMarkerAlt/>{Data.area}, {Data.city}</span></h4>\n      <br/>\n      <Category/>\n      <Featurerating/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}